{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHANVI\\\\ecoledger ai\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n\n// Chatbot component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // State to store chat messages\n  const [messages, setMessages] = useState([]);\n  // State to store the current input message\n  const [input, setInput] = useState('');\n  // State for loading indicator during API calls\n  const [isLoading, setIsLoading] = useState(false);\n  // State for loading indicator specifically for insights generation\n  const [isGeneratingInsights, setIsGeneratingInsights] = useState(false);\n  // Ref to scroll to the bottom of the chat messages\n  const messagesEndRef = useRef(null);\n\n  // Scroll to the latest message whenever messages state changes\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Function to send message to Gemini API for regular chat\n  const sendMessage = async e => {\n    e.preventDefault(); // Prevent form submission default behavior\n\n    if (input.trim() === '') return; // Don't send empty messages\n\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]); // Add user message to chat\n    setInput(''); // Clear input field\n    setIsLoading(true); // Show loading indicator for chat\n\n    try {\n      // Prepare chat history for the API call\n      let chatHistory = messages.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'model',\n        parts: [{\n          text: msg.text\n        }]\n      }));\n      chatHistory.push({\n        role: \"user\",\n        parts: [{\n          text: input\n        }]\n      }); // Add current user input\n\n      const payload = {\n        contents: chatHistory\n      };\n      const apiKey = \"\"; // Leave this as is; Canvas will provide the API key at runtime\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const botResponseText = result.candidates[0].content.parts[0].text;\n        const botMessage = {\n          text: botResponseText,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]); // Add bot response\n      } else {\n        console.error(\"Unexpected API response structure:\", result);\n        const errorMessage = {\n          text: \"Sorry, I couldn't get a response. Please try again.\",\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n    } catch (error) {\n      console.error(\"Error calling Gemini API:\", error);\n      const errorMessage = {\n        text: \"There was an error connecting to the AI. Please check your network or try again later.\",\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsLoading(false); // Hide loading indicator\n    }\n  };\n\n  // Function to generate insights from chat history using Gemini API\n  const generateInsights = async () => {\n    if (messages.length === 0) {\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"There's no conversation history to generate insights from yet. Start by chatting!\",\n        sender: 'bot'\n      }]);\n      return;\n    }\n    setIsGeneratingInsights(true); // Show loading indicator for insights\n    const insightsPrompt = \"Based on the following conversation about carbon credits and green initiatives, please provide a concise summary or key insights. Focus on actionable takeaways or important concepts discussed:\\n\\n\" + messages.map(msg => `${msg.sender === 'user' ? 'User' : 'Assistant'}: ${msg.text}`).join('\\n');\n    try {\n      const payload = {\n        contents: [{\n          role: \"user\",\n          parts: [{\n            text: insightsPrompt\n          }]\n        }]\n      };\n      const apiKey = \"\"; // Leave this as is; Canvas will provide the API key at runtime\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const insightsText = result.candidates[0].content.parts[0].text;\n        const insightsMessage = {\n          text: `âœ¨ Here are some insights based on our conversation:\\n\\n${insightsText}`,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, insightsMessage]); // Add insights message\n      } else {\n        console.error(\"Unexpected API response structure for insights:\", result);\n        const errorMessage = {\n          text: \"Sorry, I couldn't generate insights. Please try again.\",\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n    } catch (error) {\n      console.error(\"Error calling Gemini API for insights:\", error);\n      const errorMessage = {\n        text: \"There was an error generating insights. Please check your network or try again later.\",\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsGeneratingInsights(false); // Hide loading indicator for insights\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 w-full max-w-2xl bg-gray-800 rounded-b-lg shadow-lg flex flex-col overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4 overflow-y-auto custom-scrollbar\",\n      children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-gray-500 mt-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Hello! I'm your EcoLedger AI Assistant.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ask me anything about carbon credits, green initiatives, or provide your data for insights!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex mb-4 ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `max-w-[70%] p-3 rounded-lg shadow-md ${msg.sender === 'user' ? 'bg-green-600 text-white rounded-br-none' : 'bg-gray-700 text-gray-100 rounded-bl-none'}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)), (isLoading || isGeneratingInsights) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-start mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-[70%] p-3 rounded-lg shadow-md bg-gray-700 text-gray-100 rounded-bl-none\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"animate-pulse mr-2\",\n              children: \"...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 33\n            }, this), \" Thinking\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"p-4 border-t border-gray-700 flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message here...\",\n        className: \"flex-1 p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:border-green-500 transition-all duration-200\",\n        disabled: isLoading || isGeneratingInsights\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"ml-4 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n        disabled: isLoading || isGeneratingInsights || input.trim() === '',\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\" // Use type=\"button\" to prevent form submission\n        ,\n        onClick: generateInsights,\n        className: \"ml-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n        disabled: isLoading || isGeneratingInsights || messages.length === 0,\n        children: \"\\u2728 Get Insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"jA8dARsKA/pQZ93M0pjCvo1mM7A=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","isGeneratingInsights","setIsGeneratingInsights","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","e","preventDefault","trim","userMessage","text","sender","prevMessages","chatHistory","map","msg","role","parts","push","payload","contents","apiKey","apiUrl","response","fetch","method","headers","body","JSON","stringify","result","json","candidates","length","content","botResponseText","botMessage","console","error","errorMessage","generateInsights","insightsPrompt","join","insightsText","insightsMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SHANVI/ecoledger ai/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Chatbot component\r\nconst Chatbot = () => {\r\n    // State to store chat messages\r\n    const [messages, setMessages] = useState([]);\r\n    // State to store the current input message\r\n    const [input, setInput] = useState('');\r\n    // State for loading indicator during API calls\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    // State for loading indicator specifically for insights generation\r\n    const [isGeneratingInsights, setIsGeneratingInsights] = useState(false);\r\n    // Ref to scroll to the bottom of the chat messages\r\n    const messagesEndRef = useRef(null);\r\n\r\n    // Scroll to the latest message whenever messages state changes\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    // Function to send message to Gemini API for regular chat\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault(); // Prevent form submission default behavior\r\n\r\n        if (input.trim() === '') return; // Don't send empty messages\r\n\r\n        const userMessage = { text: input, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]); // Add user message to chat\r\n        setInput(''); // Clear input field\r\n        setIsLoading(true); // Show loading indicator for chat\r\n\r\n        try {\r\n            // Prepare chat history for the API call\r\n            let chatHistory = messages.map(msg => ({\r\n                role: msg.sender === 'user' ? 'user' : 'model',\r\n                parts: [{ text: msg.text }]\r\n            }));\r\n            chatHistory.push({ role: \"user\", parts: [{ text: input }] }); // Add current user input\r\n\r\n            const payload = { contents: chatHistory };\r\n            const apiKey = \"\"; // Leave this as is; Canvas will provide the API key at runtime\r\n            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n            const response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.candidates && result.candidates.length > 0 &&\r\n                result.candidates[0].content && result.candidates[0].content.parts &&\r\n                result.candidates[0].content.parts.length > 0) {\r\n                const botResponseText = result.candidates[0].content.parts[0].text;\r\n                const botMessage = { text: botResponseText, sender: 'bot' };\r\n                setMessages((prevMessages) => [...prevMessages, botMessage]); // Add bot response\r\n            } else {\r\n                console.error(\"Unexpected API response structure:\", result);\r\n                const errorMessage = { text: \"Sorry, I couldn't get a response. Please try again.\", sender: 'bot' };\r\n                setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error calling Gemini API:\", error);\r\n            const errorMessage = { text: \"There was an error connecting to the AI. Please check your network or try again later.\", sender: 'bot' };\r\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsLoading(false); // Hide loading indicator\r\n        }\r\n    };\r\n\r\n    // Function to generate insights from chat history using Gemini API\r\n    const generateInsights = async () => {\r\n        if (messages.length === 0) {\r\n            setMessages((prevMessages) => [...prevMessages, { text: \"There's no conversation history to generate insights from yet. Start by chatting!\", sender: 'bot' }]);\r\n            return;\r\n        }\r\n\r\n        setIsGeneratingInsights(true); // Show loading indicator for insights\r\n        const insightsPrompt = \"Based on the following conversation about carbon credits and green initiatives, please provide a concise summary or key insights. Focus on actionable takeaways or important concepts discussed:\\n\\n\" +\r\n            messages.map(msg => `${msg.sender === 'user' ? 'User' : 'Assistant'}: ${msg.text}`).join('\\n');\r\n\r\n        try {\r\n            const payload = { contents: [{ role: \"user\", parts: [{ text: insightsPrompt }] }] };\r\n            const apiKey = \"\"; // Leave this as is; Canvas will provide the API key at runtime\r\n            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n            const response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.candidates && result.candidates.length > 0 &&\r\n                result.candidates[0].content && result.candidates[0].content.parts &&\r\n                result.candidates[0].content.parts.length > 0) {\r\n                const insightsText = result.candidates[0].content.parts[0].text;\r\n                const insightsMessage = { text: `âœ¨ Here are some insights based on our conversation:\\n\\n${insightsText}`, sender: 'bot' };\r\n                setMessages((prevMessages) => [...prevMessages, insightsMessage]); // Add insights message\r\n            } else {\r\n                console.error(\"Unexpected API response structure for insights:\", result);\r\n                const errorMessage = { text: \"Sorry, I couldn't generate insights. Please try again.\", sender: 'bot' };\r\n                setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error calling Gemini API for insights:\", error);\r\n            const errorMessage = { text: \"There was an error generating insights. Please check your network or try again later.\", sender: 'bot' };\r\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsGeneratingInsights(false); // Hide loading indicator for insights\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex-1 w-full max-w-2xl bg-gray-800 rounded-b-lg shadow-lg flex flex-col overflow-hidden\">\r\n            {/* Messages Display Area */}\r\n            <div className=\"flex-1 p-4 overflow-y-auto custom-scrollbar\">\r\n                {messages.length === 0 && (\r\n                    <div className=\"text-center text-gray-500 mt-10\">\r\n                        <p>Hello! I'm your EcoLedger AI Assistant.</p>\r\n                        <p>Ask me anything about carbon credits, green initiatives, or provide your data for insights!</p>\r\n                    </div>\r\n                )}\r\n                {messages.map((msg, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={`flex mb-4 ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}\r\n                    >\r\n                        <div\r\n                            className={`max-w-[70%] p-3 rounded-lg shadow-md ${msg.sender === 'user'\r\n                                    ? 'bg-green-600 text-white rounded-br-none'\r\n                                    : 'bg-gray-700 text-gray-100 rounded-bl-none'\r\n                                }`}\r\n                        >\r\n                            {msg.text}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {(isLoading || isGeneratingInsights) && (\r\n                    <div className=\"flex justify-start mb-4\">\r\n                        <div className=\"max-w-[70%] p-3 rounded-lg shadow-md bg-gray-700 text-gray-100 rounded-bl-none\">\r\n                            <div className=\"flex items-center\">\r\n                                <span className=\"animate-pulse mr-2\">...</span> Thinking\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div ref={messagesEndRef} /> {/* Empty div for scrolling */}\r\n            </div>\r\n\r\n            {/* Input Area */}\r\n            <form onSubmit={sendMessage} className=\"p-4 border-t border-gray-700 flex items-center\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Type your message here...\"\r\n                    className=\"flex-1 p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:border-green-500 transition-all duration-200\"\r\n                    disabled={isLoading || isGeneratingInsights}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"ml-4 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    disabled={isLoading || isGeneratingInsights || input.trim() === ''}\r\n                >\r\n                    Send\r\n                </button>\r\n                <button\r\n                    type=\"button\" // Use type=\"button\" to prevent form submission\r\n                    onClick={generateInsights}\r\n                    className=\"ml-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    disabled={isLoading || isGeneratingInsights || messages.length === 0}\r\n                >\r\n                    âœ¨ Get Insights\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}