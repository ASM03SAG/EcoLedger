{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHANVI\\\\ecoledger ai\\\\src\\\\components\\\\FuturePrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FuturePrediction = () => {\n  _s();\n  const [inputScenario, setInputScenario] = useState('');\n  const [predictionResult, setPredictionResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const getFuturePrediction = async () => {\n    if (inputScenario.trim() === '') {\n      setPredictionResult(\"Please describe a scenario to get a future prediction.\");\n      return;\n    }\n    setIsLoading(true);\n    setPredictionResult(''); // Clear previous result\n\n    const prompt = `Based on the following scenario related to carbon credits, green initiatives, or environmental policies, provide a prediction about future outcomes or impacts. Focus on plausible scenarios and potential implications. Scenario: \"${inputScenario}\"`;\n    try {\n      const payload = {\n        contents: [{\n          role: \"user\",\n          parts: [{\n            text: prompt\n          }]\n        }]\n      };\n      const apiKey = \"AIzaSyCOjle9xtSeNsCzL4CXbGvAa8Vl5I6NOXI\"; // Canvas will provide the API key\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        setPredictionResult(result.candidates[0].content.parts[0].text);\n      } else {\n        console.error(\"Unexpected API response structure:\", result);\n        setPredictionResult(\"Sorry, I couldn't generate the future prediction. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error calling Gemini API for future prediction:\", error);\n      setPredictionResult(\"There was an error connecting to the AI. Please check your network or try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 w-full max-w-2xl bg-gray-800 rounded-b-lg shadow-lg flex flex-col overflow-hidden p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold text-green-400 mb-4\",\n      children: \"Future Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-400 mb-4\",\n      children: \"Describe a scenario to get a prediction about future environmental or carbon credit trends.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:border-green-500 transition-all duration-200 mb-4 h-32 resize-y\",\n      placeholder: \"e.g., 'What will be the impact on carbon credit prices if major economies adopt stricter emission caps by 2030?' or 'Predict the future of renewable energy adoption in developing countries.'\",\n      value: inputScenario,\n      onChange: e => setInputScenario(e.target.value),\n      disabled: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getFuturePrediction,\n      className: \"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed mb-4\",\n      disabled: isLoading || inputScenario.trim() === '',\n      children: isLoading ? 'Predicting...' : 'Get Prediction'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), predictionResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-700 p-4 rounded-lg shadow-md text-gray-100 mt-4 overflow-y-auto max-h-64 custom-scrollbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold text-green-300 mb-2\",\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"whitespace-pre-wrap\",\n        children: predictionResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(FuturePrediction, \"w9KlgIjy46JGKgr46hohmdRRVS0=\");\n_c = FuturePrediction;\nexport default FuturePrediction;\nvar _c;\n$RefreshReg$(_c, \"FuturePrediction\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FuturePrediction","_s","inputScenario","setInputScenario","predictionResult","setPredictionResult","isLoading","setIsLoading","getFuturePrediction","trim","prompt","payload","contents","role","parts","text","apiKey","apiUrl","response","fetch","method","headers","body","JSON","stringify","result","json","candidates","length","content","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SHANVI/ecoledger ai/src/components/FuturePrediction.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst FuturePrediction = () => {\r\n    const [inputScenario, setInputScenario] = useState('');\r\n    const [predictionResult, setPredictionResult] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const getFuturePrediction = async () => {\r\n        if (inputScenario.trim() === '') {\r\n            setPredictionResult(\"Please describe a scenario to get a future prediction.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setPredictionResult(''); // Clear previous result\r\n\r\n        const prompt = `Based on the following scenario related to carbon credits, green initiatives, or environmental policies, provide a prediction about future outcomes or impacts. Focus on plausible scenarios and potential implications. Scenario: \"${inputScenario}\"`;\r\n\r\n        try {\r\n            const payload = { contents: [{ role: \"user\", parts: [{ text: prompt }] }] };\r\n            const apiKey = \"AIzaSyCOjle9xtSeNsCzL4CXbGvAa8Vl5I6NOXI\"; // Canvas will provide the API key\r\n            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n            const response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.candidates && result.candidates.length > 0 &&\r\n                result.candidates[0].content && result.candidates[0].content.parts &&\r\n                result.candidates[0].content.parts.length > 0) {\r\n                setPredictionResult(result.candidates[0].content.parts[0].text);\r\n            } else {\r\n                console.error(\"Unexpected API response structure:\", result);\r\n                setPredictionResult(\"Sorry, I couldn't generate the future prediction. Please try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error calling Gemini API for future prediction:\", error);\r\n            setPredictionResult(\"There was an error connecting to the AI. Please check your network or try again later.\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex-1 w-full max-w-2xl bg-gray-800 rounded-b-lg shadow-lg flex flex-col overflow-hidden p-6\">\r\n            <h2 className=\"text-xl font-bold text-green-400 mb-4\">Future Prediction</h2>\r\n            <p className=\"text-gray-400 mb-4\">Describe a scenario to get a prediction about future environmental or carbon credit trends.</p>\r\n\r\n            <textarea\r\n                className=\"w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:border-green-500 transition-all duration-200 mb-4 h-32 resize-y\"\r\n                placeholder=\"e.g., 'What will be the impact on carbon credit prices if major economies adopt stricter emission caps by 2030?' or 'Predict the future of renewable energy adoption in developing countries.'\"\r\n                value={inputScenario}\r\n                onChange={(e) => setInputScenario(e.target.value)}\r\n                disabled={isLoading}\r\n            ></textarea>\r\n\r\n            <button\r\n                onClick={getFuturePrediction}\r\n                className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed mb-4\"\r\n                disabled={isLoading || inputScenario.trim() === ''}\r\n            >\r\n                {isLoading ? 'Predicting...' : 'Get Prediction'}\r\n            </button>\r\n\r\n            {predictionResult && (\r\n                <div className=\"bg-gray-700 p-4 rounded-lg shadow-md text-gray-100 mt-4 overflow-y-auto max-h-64 custom-scrollbar\">\r\n                    <h3 className=\"font-semibold text-green-300 mb-2\">Prediction Result:</h3>\r\n                    <p className=\"whitespace-pre-wrap\">{predictionResult}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FuturePrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}